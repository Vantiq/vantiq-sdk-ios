<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Vantiq.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Vantiq</TokenIdentifier>
			<Abstract type="html">The Vantiq class declares the interface for authentication and subsequent interaction with a Vantiq server.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/setAccessToken:</TokenIdentifier>
			<Abstract type="html">Access token to be used for direct Vantiq server operations.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic) NSString *accessToken</Declaration>
			
			
			<Anchor>//api/name/accessToken</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/accessToken</TokenIdentifier>
			<Abstract type="html">Access token to be used for direct Vantiq server operations.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic) NSString *accessToken</Declaration>
			
			
			<Anchor>//api/name/accessToken</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Vantiq/accessToken</TokenIdentifier>
			<Abstract type="html">Access token to be used for direct Vantiq server operations.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic) NSString *accessToken</Declaration>
			
			
			<Anchor>//api/name/accessToken</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/setUsername:</TokenIdentifier>
			<Abstract type="html">User name of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/username</TokenIdentifier>
			<Abstract type="html">User name of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Vantiq/username</TokenIdentifier>
			<Abstract type="html">User name of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/setNamespace:</TokenIdentifier>
			<Abstract type="html">Namespace of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *namespace</Declaration>
			
			
			<Anchor>//api/name/namespace</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/namespace</TokenIdentifier>
			<Abstract type="html">Namespace of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *namespace</Declaration>
			
			
			<Anchor>//api/name/namespace</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Vantiq/namespace</TokenIdentifier>
			<Abstract type="html">Namespace of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *namespace</Declaration>
			
			
			<Anchor>//api/name/namespace</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/setServerId:</TokenIdentifier>
			<Abstract type="html">Server ID of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *serverId</Declaration>
			
			
			<Anchor>//api/name/serverId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/serverId</TokenIdentifier>
			<Abstract type="html">Server ID of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *serverId</Declaration>
			
			
			<Anchor>//api/name/serverId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Vantiq/serverId</TokenIdentifier>
			<Abstract type="html">Server ID of the last authenticated user</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *serverId</Declaration>
			
			
			<Anchor>//api/name/serverId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/setAppUUID:</TokenIdentifier>
			<Abstract type="html">Unique ID for this installation of the device running the Vantiq SDK</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *appUUID</Declaration>
			
			
			<Anchor>//api/name/appUUID</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/appUUID</TokenIdentifier>
			<Abstract type="html">Unique ID for this installation of the device running the Vantiq SDK</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *appUUID</Declaration>
			
			
			<Anchor>//api/name/appUUID</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Vantiq/appUUID</TokenIdentifier>
			<Abstract type="html">Unique ID for this installation of the device running the Vantiq SDK</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic) NSString *appUUID</Declaration>
			
			
			<Anchor>//api/name/appUUID</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/initWithServer:apiVersion:</TokenIdentifier>
			<Abstract type="html">Constructor for use with all other Vantiq server operations.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (id)initWithServer:(NSString *)server apiVersion:(unsigned long)version</Declaration>
			<Parameters>
				<Parameter>
					<Name>server</Name>
					<Abstract type="html">Server URL, e.g. https://dev.vantiq.com</Abstract>
				</Parameter><Parameter>
					<Name>version</Name>
					<Abstract type="html">Version of the Vantiq API to use</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithServer:apiVersion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/initWithServer:</TokenIdentifier>
			<Abstract type="html">Constructor for use with all other Vantiq server operations. This constructor
will use the most recent version of the Vantiq API. If an earlier version of the
API is required, use the initWithServer:server apiVersion:version contructor.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/initWithServer:apiVersion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)initWithServer:(NSString *)server</Declaration>
			<Parameters>
				<Parameter>
					<Name>server</Name>
					<Abstract type="html">Server URL, e.g. https://dev.vantiq.com</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithServer:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/verify:username:completionHandler:</TokenIdentifier>
			<Abstract type="html">The verify method attempts to validate the given Vantiq server token. If the token has expired
or a token has never been issued, the error parameter in the callback will be non-null and the
app should then call authenticate (see below) in order to reauthenticate the user.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/authenticate:password:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)verify:(NSString *)accessToken username:(NSString *)username completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>accessToken</Name>
					<Abstract type="html">The access token to verify</Abstract>
				</Parameter><Parameter>
					<Name>username</Name>
					<Abstract type="html">The username associated with the token</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/verify:username:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/authenticate:password:completionHandler:</TokenIdentifier>
			<Abstract type="html">The authenticate method connects to the Vantiq server with the given authentication
credentials used to authorize the user. The username and password credentials are not stored.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)authenticate:(NSString *)username password:(NSString *)password completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract type="html">The username to provide access to the Vantiq server</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">The password associated with the username</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/authenticate:password:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:sort:completionHandler:</TokenIdentifier>
			<Abstract type="html">The select method issues a query to select all matching records for a given type.
The select may query both user-defined types as well as system types, such as procedures and types.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)select:(NSString *)type props:(NSArray *)props where:(NSString *)where sort:(NSString *)sort completionHandler:(void ( ^ ) ( NSArray *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query</Abstract>
				</Parameter><Parameter>
					<Name>props</Name>
					<Abstract type="html">Specifies the desired properties to be returned in each record. An empty array or null value means all properties will be returned. The array contains NSStrings.</Abstract>
				</Parameter><Parameter>
					<Name>where</Name>
					<Abstract type="html">Specifies constraints to filter the data. Null means all records will be returned.</Abstract>
				</Parameter><Parameter>
					<Name>sort</Name>
					<Abstract type="html">Specifies the desired sort for the result set. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: array of NSDictionary objects of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/select:props:where:sort:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:completionHandler:</TokenIdentifier>
			<Abstract type="html">The select method issues a query to select all matching records for a given type.
The select may query both user-defined types as well as system types, such as procedures and types.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:sort:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)select:(NSString *)type props:(NSArray *)props where:(NSString *)where completionHandler:(void ( ^ ) ( NSArray *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query</Abstract>
				</Parameter><Parameter>
					<Name>props</Name>
					<Abstract type="html">Specifies the desired properties to be returned in each record. An empty array or null value means all properties will be returned. The array contains NSStrings.</Abstract>
				</Parameter><Parameter>
					<Name>where</Name>
					<Abstract type="html">Specifies constraints to filter the data. Null means all records will be returned. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: array of NSDictionary objects of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/select:props:where:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:completionHandler:</TokenIdentifier>
			<Abstract type="html">The select method issues a query to select all matching records for a given type.
The select may query both user-defined types as well as system types, such as procedures and types.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:sort:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)select:(NSString *)type props:(NSArray *)props completionHandler:(void ( ^ ) ( NSArray *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>props</Name>
					<Abstract type="html">Specifies the desired properties to be returned in each record. An empty array or null value means all properties will be returned. The array contains NSStrings.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: array of NSDictionary objects of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/select:props:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:completionHandler:</TokenIdentifier>
			<Abstract type="html">The select method issues a query to select all matching records for a given type.
The select may query both user-defined types as well as system types, such as procedures and types.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:sort:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)select:(NSString *)type completionHandler:(void ( ^ ) ( NSArray *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: array of NSDictionary objects of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/select:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/selectOne:id:completionHandler:</TokenIdentifier>
			<Abstract type="html">The selectOne method issues a query to select a single record for a given type and unique identifier.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/select:props:where:sort:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)selectOne:(NSString *)type id:(NSString *)ID completionHandler:(void ( ^ ) ( NSArray *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>ID</Name>
					<Abstract type="html">The unique identifier that matches the type&apos;s &apos;_id&apos; property.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: array of NSDictionary objects of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/selectOne:id:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/count:where:completionHandler:</TokenIdentifier>
			<Abstract type="html">The count method is similar to the select method except it returns only the number of records rather than returning the records themselves.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)count:(NSString *)type where:(NSString *)where completionHandler:(void ( ^ ) ( int count , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>where</Name>
					<Abstract type="html">Specifies constraints to filter the data. Null means all records will be returned. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">count: number of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/count:where:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/count:completionHandler:</TokenIdentifier>
			<Abstract type="html">The count method is similar to the select method except it returns only the number of records rather than returning the records themselves.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/count:where:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)count:(NSString *)type completionHandler:(void ( ^ ) ( int count , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">count: number of matching recordsresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/count:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/insert:object:completionHandler:</TokenIdentifier>
			<Abstract type="html">The insert method creates a new record of a given type.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)insert:(NSString *)type object:(NSString *)object completionHandler:(void ( ^ ) ( NSDictionary *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to insert.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The JSON-formated string data to insert.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: copy of the inserted dataresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/insert:object:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/update:id:object:completionHandler:</TokenIdentifier>
			<Abstract type="html">The update method updates an existing record of a given type. This method supports partial updates meaning that only the properties provided are updated. Any properties not specified are not changed in the underlying record.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)update:(NSString *)type id:(NSString *)ID object:(NSString *)object completionHandler:(void ( ^ ) ( NSDictionary *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to update.</Abstract>
				</Parameter><Parameter>
					<Name>ID</Name>
					<Abstract type="html">The &quot;_id&quot; internal identifier for the record.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The JSON-formated string data to update.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: copy of the updated dataresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/update:id:object:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/upsert:object:completionHandler:</TokenIdentifier>
			<Abstract type="html">The upsert method either creates or updates a record in the database depending if the record already exists. The method tests for existence by looking at the natural keys defined on the type.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)upsert:(NSString *)type object:(NSString *)object completionHandler:(void ( ^ ) ( NSDictionary *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to upsert.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The JSON-formated string data to upsert.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: copy of the upserted dataresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/upsert:object:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/delete:resourceId:completionHandler:</TokenIdentifier>
			<Abstract type="html">This delete method removes records from the system for a given type. Use this form of delete
for system types which require the name of the type in order to perform the delete.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)delete:(NSString *)type resourceId:(NSString *)resourceId completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>resourceId</Name>
					<Abstract type="html">The resource identifier. This is a string and is mostly but not always associated with the type&apos;s &apos;name&apos; property.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/delete:resourceId:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/delete:where:completionHandler:</TokenIdentifier>
			<Abstract type="html">This delete method removes records from the system for a given type. Deletes always require a constraint indicating which records to remove.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)delete:(NSString *)type where:(NSString *)where completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>where</Name>
					<Abstract type="html">Specifies constraints to filter the data. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/delete:where:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/deleteOne:id:completionHandler:</TokenIdentifier>
			<Abstract type="html">The deleteOne method issues a query to delete a single record for a given type and unique identifier.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/delete:where:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deleteOne:(NSString *)type id:(NSString *)ID completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The data type to query.</Abstract>
				</Parameter><Parameter>
					<Name>ID</Name>
					<Abstract type="html">The unique identifier that matches the type&apos;s &apos;_id&apos; property.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/deleteOne:id:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/publish:message:completionHandler:</TokenIdentifier>
			<Abstract type="html">The publish method publishes a message onto a given topic. Messages published onto topics can trigger rules to facilitate identifying situations.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)publish:(NSString *)topic message:(NSString *)message completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>topic</Name>
					<Abstract type="html">The topic on which to publish.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">The message to publish. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/publish:message:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/execute:params:completionHandler:</TokenIdentifier>
			<Abstract type="html">The execute method executes a procedure on the Vantiq server. Procedures can take parameters (i.e. arguments) and produce a result.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)execute:(NSString *)procedure params:(NSString *)params completionHandler:(void ( ^ ) ( id data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>procedure</Name>
					<Abstract type="html">The procedure to execute. The parameters may be provided as an array where the arguments are given in order. Alternatively, the parameters may be provided as an object where the arguments are named.</Abstract>
				</Parameter><Parameter>
					<Name>params</Name>
					<Abstract type="html">Parameters passed to the procedure. This is a JSON-formatted string.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: result of method execution, if any, usually an NSDictionary or NSArray (use isKindOfClass to determine)response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/execute:params:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/execute:completionHandler:</TokenIdentifier>
			<Abstract type="html">The execute method executes a procedure on the Vantiq server. Procedures can take parameters (i.e. arguments) and produce a result.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/Vantiq/execute:params:completionHandler:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)execute:(NSString *)procedure completionHandler:(void ( ^ ) ( id data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>procedure</Name>
					<Abstract type="html">The procedure to execute. The parameters may be provided as an array where the arguments are given in order. Alternatively, the parameters may be provided as an object where the arguments are named.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: result of method execution, if any, usually an NSDictionary or NSArray (use isKindOfClass to determine)response: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/execute:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/registerForPushNotifications:completionHandler:</TokenIdentifier>
			<Abstract type="html">The registerForPushNotifications method registers an app to receive Apple Push Notifications. Please note that
you must enable the iOS app for Push Notifications and for the remote-notifications Background Mode, in addition
to assigning a bundle identifier in both the app and in the app definition and provisioning profiles at the
Apple Developer site.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)registerForPushNotifications:(NSString *)APNSDeviceToken completionHandler:(void ( ^ ) ( NSDictionary *data , NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>APNSDeviceToken</Name>
					<Abstract type="html">The APNS Device Token returned by the registerForRemoteNotifications method.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: result of method execution, if anyresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/registerForPushNotifications:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Vantiq/uploadDocument:fileName:filePrefix:contentType:completionHandler:</TokenIdentifier>
			<Abstract type="html">The uploadDocument method uploads the given file, specified by the full path and file name, with
any directory prefix and the given content type (MIME type). The upload process creates an
ArsDocument record which contains the contents of the file.</Abstract>
			<DeclaredIn>Vantiq.h</DeclaredIn>
			
			<Declaration>- (void)uploadDocument:(NSString *)filePath fileName:(NSString *)fileName filePrefix:(NSString *)filePrefix contentType:(NSString *)contentType completionHandler:(void ( ^ ) ( NSHTTPURLResponse *response , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The full path to the document, for example in the NSDocumentDirectory appended with the file name</Abstract>
				</Parameter><Parameter>
					<Name>fileName</Name>
					<Abstract type="html">The file name which also contains its file extension</Abstract>
				</Parameter><Parameter>
					<Name>filePrefix</Name>
					<Abstract type="html">Any directory prefix to be added to the file path when it&apos;s uploaded</Abstract>
				</Parameter><Parameter>
					<Name>contentType</Name>
					<Abstract type="html">The MIME type of the file contents</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler block to execute</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">data: result of method execution, if anyresponse: iOS HTTP operation responseerror: iOS error condition response</Abstract></ReturnValue>
			<Anchor>//api/name/uploadDocument:fileName:filePrefix:contentType:completionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>